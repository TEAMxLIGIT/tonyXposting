# msgall.py

import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message
from config import api_id, api_hash, bot_token, owner_id

app = Client('userbot_session', api_id=api_id, api_hash=api_hash, bot_token=bot_token)

# Variable to keep track of whether the userbot should continue running
userbot_running = True

@app.on_message(filters.regex(r'[.,/]') & filters.user(owner_id))
async def handle_msgall_command(_, message: Message):
    global userbot_running

    if userbot_running and (message.text.startswith(',"/msgall') or message.text.startswith('.msgall')):
        await send_msgall_message(message)

async def send_msgall_message(message: Message):
    # Extract the desired message from the command
    command_parts = message.text.split(' ')
    if len(command_parts) >= 2:
        desired_message = ' '.join(command_parts[1:])
        await message.reply_chat_action("typing")
        await asyncio.sleep(2)  # Adjust the time delay if needed

        # Get recent members of the group
        chat_id = message.chat.id
        members = await app.get_chat_members(chat_id)
        
        # Send the desired message to recent users in the same group
        for member in members:
            user_id = member.user.id
            try:
                await app.send_message(user_id, desired_message)
            except Exception as e:
                print(f"Error sending message to user {user_id}: {str(e)}")

        await message.reply_text("Message sent to recent users in the same group.")
    else:
        await message.reply_text("Invalid command format. Use ',"/msgall [desired message]'.")

if __name__ == "__main__":
    app.run()